<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [debug\sdcard_fatfs.out]</title></head>
<body><HR>
<H1>Static Call Graph for image debug\sdcard_fatfs.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jan 16 17:50:30 2020
<BR><P>
<H3>Maximum Stack Usage =       1104 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; read_image &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[36]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">NMI_Handler</a><BR>
 <LI><a href="#[37]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">HardFault_Handler</a><BR>
 <LI><a href="#[38]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">MemManage_Handler</a><BR>
 <LI><a href="#[39]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">BusFault_Handler</a><BR>
 <LI><a href="#[3a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">UsageFault_Handler</a><BR>
 <LI><a href="#[3b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">SVC_Handler</a><BR>
 <LI><a href="#[3c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">DebugMon_Handler</a><BR>
 <LI><a href="#[3d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[66]">ADC0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[88]">ADC1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[39]">BusFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8b]">CAN0_Bus_Off_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[29]">CAN0_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[8c]">CAN0_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8a]">CAN0_ORed_Message_buffer_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8e]">CAN0_Rx_Warning_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8d]">CAN0_Tx_Warning_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8f]">CAN0_Wake_Up_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[67]">CMP0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[68]">CMP1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[85]">CMP2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6c]">CMT_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[77]">DAC0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[87]">DAC1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3]">DMA0_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[3f]">DMA0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[d]">DMA10_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[49]">DMA10_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[e]">DMA11_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4a]">DMA11_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[f]">DMA12_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4b]">DMA12_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[10]">DMA13_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4c]">DMA13_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[11]">DMA14_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4d]">DMA14_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[12]">DMA15_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4e]">DMA15_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[4]">DMA1_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[40]">DMA1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[5]">DMA2_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[41]">DMA2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6]">DMA3_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[42]">DMA3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7]">DMA4_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[43]">DMA4_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8]">DMA5_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[44]">DMA5_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[9]">DMA6_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[45]">DMA6_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[a]">DMA7_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[46]">DMA7_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b]">DMA8_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[47]">DMA8_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[c]">DMA9_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[48]">DMA9_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[13]">DMA_Error_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[4f]">DMA_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[31]">DbgConsole_Putchar</a> from fsl_debug_console.o(i.DbgConsole_Putchar) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[3c]">DebugMon_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[95]">DefaultISR</a> from startup_mk64f12.o(.text) referenced 153 times from startup_mk64f12.o(RESET)
 <LI><a href="#[2b]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[91]">ENET_1588_Timer_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2e]">ENET_Error_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[94]">ENET_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2d]">ENET_Receive_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[93]">ENET_Receive_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2c]">ENET_Transmit_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[92]">ENET_Transmit_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[51]">FTFE_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[69]">FTM0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6a]">FTM1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6b]">FTM2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[86]">FTM3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[37]">HardFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[14]">I2C0_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[57]">I2C0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[15]">I2C1_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[58]">I2C1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[28]">I2C2_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[89]">I2C2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[19]">I2S0_Rx_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5c]">I2S0_Rx_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[18]">I2S0_Tx_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5b]">I2S0_Tx_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[54]">LLWU_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[79]">LPTMR0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[53]">LVD_LVW_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[78]">MCG_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[50]">MCM_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[38]">MemManage_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[36]">NMI_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[73]">PDB0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6f]">PIT0_IRQHandler</a> from sdcard_fatfs.o(i.PIT0_IRQHandler) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[70]">PIT1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[71]">PIT2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[72]">PIT3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7a]">PORTA_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7b]">PORTB_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7c]">PORTC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7d]">PORTD_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7e]">PORTE_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3d]">PendSV_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[56]">RNG_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6d]">RTC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6e]">RTC_Seconds_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[52]">Read_Collision_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[76]">Reserved71_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[35]">Reset_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2a]">SDHC_DriverIRQHandler</a> from fsl_sdhc.o(i.SDHC_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[90]">SDHC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[16]">SPI0_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[59]">SPI0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[17]">SPI1_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5a]">SPI1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[23]">SPI2_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[80]">SPI2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3b]">SVC_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7f]">SWI_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3e]">SysTick_Handler</a> from event.o(i.SysTick_Handler) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1]">SystemInit</a> from system_mk64f12.o(i.SystemInit) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[1c]">UART0_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5f]">UART0_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1a]">UART0_LON_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5d]">UART0_LON_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1b]">UART0_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[5e]">UART0_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1e]">UART1_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[61]">UART1_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1d]">UART1_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[60]">UART1_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[20]">UART2_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[63]">UART2_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1f]">UART2_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[62]">UART2_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[22]">UART3_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[65]">UART3_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[21]">UART3_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART3_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[64]">UART3_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[25]">UART4_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[82]">UART4_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[24]">UART4_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART4_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[81]">UART4_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[27]">UART5_ERR_DriverIRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[84]">UART5_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[26]">UART5_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART5_RX_TX_DriverIRQHandler) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[83]">UART5_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[30]">UART_ReadBlocking</a> from fsl_uart.o(i.UART_ReadBlocking) referenced from fsl_debug_console.o(i.DbgConsole_Init)
 <LI><a href="#[2f]">UART_WriteBlocking</a> from fsl_uart.o(i.UART_WriteBlocking) referenced from fsl_debug_console.o(i.DbgConsole_Init)
 <LI><a href="#[74]">USB0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[75]">USBDCD_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3a]">UsageFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[55]">WDOG_EWM_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[32]">fputc</a> from fsl_debug_console.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[0]">main</a> from sdcard_fatfs.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[33]">sdhc_transfer_complete_callback</a> from fsl_sd_disk.o(i.sdhc_transfer_complete_callback) referenced from fsl_sd_disk.o(i.sd_disk_initialize)
 <LI><a href="#[34]">sdhc_transfer_function</a> from fsl_sd_disk.o(i.sdhc_transfer_function) referenced from fsl_sd_disk.o(i.sd_disk_initialize)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[196]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[96]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[197]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[198]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[199]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[19a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[19b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[122]"></a>__asm___8_fsl_sd_c_SD_Init____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sd.o(.rev16_text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchHighspeed
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
</UL>

<P><STRONG><a name="[35]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA11_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA12_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA13_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA14_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART0_LON_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>UART5_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>UART5_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>I2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>SDHC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>DMA10_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>DMA11_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>DMA12_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>DMA13_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>DMA14_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>DMA15_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[4]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>DMA2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>DMA3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>DMA4_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>DMA5_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>DMA6_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>DMA7_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>DMA8_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>DMA9_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>DMA_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>ENET_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>ENET_Receive_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>ENET_Transmit_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>FTFE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>FTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>I2S0_Rx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>I2S0_Tx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>SPI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART0_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>UART0_LON_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>UART1_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>UART2_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>UART3_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>UART4_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>UART5_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferCreateHandle
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitWriteComplete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_StopTransmission
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchHighspeed
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[184]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[9f]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_freq
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_freq
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_freq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1a1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1a2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[a2]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[1a4]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a5]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[156]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[1a5]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[b2]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[b3]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetInternalRefClkConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; UART_Init &rArr; UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>BOARD_InitPins</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = BOARD_InitPins &rArr; PORT_SetPinConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinMux
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>CLOCK_BootToPeeMode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_BootToPeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[c2]"></a>CLOCK_EnablePll0</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_EnablePll0))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
</UL>

<P><STRONG><a name="[c3]"></a>CLOCK_GetBusClkFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetBusClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = CLOCK_GetBusClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_freq
</UL>

<P><STRONG><a name="[b9]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = CLOCK_GetCoreSysClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>CLOCK_GetEr32kClkFreq</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetEr32kClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = CLOCK_GetEr32kClkFreq &rArr; CLOCK_GetOsc0ErClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c7]"></a>CLOCK_GetFixedFreqClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFixedFreqClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[cb]"></a>CLOCK_GetFllFreq</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[cc]"></a>CLOCK_GetFreq</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_InitTimer
</UL>

<P><STRONG><a name="[ce]"></a>CLOCK_GetInternalRefClkFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetInternalRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c6]"></a>CLOCK_GetOsc0ErClkFreq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetOsc0ErClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = CLOCK_GetOsc0ErClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>

<P><STRONG><a name="[c4]"></a>CLOCK_GetOutClkFreq</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetBusClkFreq
</UL>

<P><STRONG><a name="[cf]"></a>CLOCK_GetPll0Freq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPll0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = CLOCK_GetPll0Freq &rArr; CLOCK_GetPll0RefFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0RefFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[cd]"></a>CLOCK_GetPllFllSelClkFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPllFllSelClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = CLOCK_GetPllFllSelClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[b4]"></a>CLOCK_InitOsc0</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_InitOsc0
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscRangeFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[c0]"></a>CLOCK_SetExternalRefClkConfig</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetExternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[b6]"></a>CLOCK_SetInternalRefClkConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, fsl_clock.o(i.CLOCK_SetInternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_SetInternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[c1]"></a>CLOCK_SetPbeMode</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_SetPbeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[b7]"></a>CLOCK_SetSimConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetSimConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[134]"></a>DDIR</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, swd_pin.o(i.DDIR))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_PinInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferOnce
</UL>

<P><STRONG><a name="[13f]"></a>DELAY_US</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, swd_pin.o(i.DELAY_US))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DELAY_US
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SetTargetState
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_WRITE_BIT
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_READ_BIT
</UL>

<P><STRONG><a name="[136]"></a>DOUT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swd_pin.o(i.DOUT))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_PinInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_WRITE_BIT
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferOnce
</UL>

<P><STRONG><a name="[ba]"></a>DbgConsole_Init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = DbgConsole_Init &rArr; UART_Init &rArr; UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[dc]"></a>DbgConsole_Printf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_image
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>DbgConsole_Putchar</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_debug_console.o(i.DbgConsole_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DbgConsole_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[e0]"></a>ERROR_TRACE</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sdcard_fatfs.o(i.ERROR_TRACE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ERROR_TRACE &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinsOutput
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_image
</UL>

<P><STRONG><a name="[e4]"></a>EVENT_Create</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, event.o(i.EVENT_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EVENT_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[e6]"></a>EVENT_Delete</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, event.o(i.EVENT_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EVENT_Delete
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[e7]"></a>EVENT_InitTimer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, event.o(i.EVENT_InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = EVENT_InitTimer &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[e8]"></a>EVENT_Notify</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, event.o(i.EVENT_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EVENT_Notify
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_transfer_complete_callback
</UL>

<P><STRONG><a name="[e9]"></a>EVENT_Wait</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, event.o(i.EVENT_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EVENT_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_transfer_function
</UL>

<P><STRONG><a name="[ea]"></a>GPIO_PinInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = GPIO_PinInit &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>PIT0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sdcard_fatfs.o(i.PIT0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>PIT_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fsl_pit.o(i.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = PIT_Init &rArr; PIT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_freq
</UL>

<P><STRONG><a name="[ed]"></a>SDHC_Deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SDHC_Deinit &rArr; SDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[2a]"></a>SDHC_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_sdhc.o(i.SDHC_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SDHC_DriverIRQHandler &rArr; SDHC_TransferHandleIRQ &rArr; SDHC_TransferHandleData &rArr; SDHC_WriteDataPort &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>SDHC_GetCapability</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_GetCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SDHC_GetCapability &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f2]"></a>SDHC_Init</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SDHC_Init &rArr; SDHC_SetTransferInterrupt &rArr; SDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetTransferInterrupt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetInstance
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[f3]"></a>SDHC_Reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_sdhc.o(i.SDHC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDHC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Init
</UL>

<P><STRONG><a name="[106]"></a>SDHC_SetAdmaTableConfig</STRONG> (Thumb, 216 bytes, Stack size 36 bytes, fsl_sdhc.o(i.SDHC_SetAdmaTableConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDHC_SetAdmaTableConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferNonBlocking
</UL>

<P><STRONG><a name="[117]"></a>SDHC_SetCardActive</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_sdhc.o(i.SDHC_SetCardActive))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f7]"></a>SDHC_SetSdClock</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, fsl_sdhc.o(i.SDHC_SetSdClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SDHC_SetSdClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f8]"></a>SDHC_SetTransferConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_SetTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SDHC_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_StartTransfer
</UL>

<P><STRONG><a name="[fa]"></a>SDHC_TransferCreateHandle</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SDHC_TransferCreateHandle &rArr; SDHC_SetTransferInterrupt &rArr; SDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetTransferInterrupt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetInstance
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[ef]"></a>SDHC_TransferHandleIRQ</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SDHC_TransferHandleIRQ &rArr; SDHC_TransferHandleData &rArr; SDHC_WriteDataPort &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleSdioInterrupt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleSdioBlockGap
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleCommand
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleCardDetect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetInterruptStatusFlags
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_ClearInterruptStatusFlags
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_DriverIRQHandler
</UL>

<P><STRONG><a name="[104]"></a>SDHC_TransferNonBlocking</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, fsl_sdhc.o(i.SDHC_TransferNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SDHC_TransferNonBlocking &rArr; SDHC_StartTransfer &rArr; SDHC_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_StartTransfer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetPresentStatusFlags
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetAdmaTableConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_transfer_function
</UL>

<P><STRONG><a name="[107]"></a>SDMMC_GoIdle</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, fsl_sdmmc.o(i.SDMMC_GoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SDMMC_GoIdle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
</UL>

<P><STRONG><a name="[108]"></a>SDMMC_SelectCard</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, fsl_sdmmc.o(i.SDMMC_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SDMMC_SelectCard &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
</UL>

<P><STRONG><a name="[109]"></a>SDMMC_SendApplicationCommand</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, fsl_sdmmc.o(i.SDMMC_SendApplicationCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
</UL>

<P><STRONG><a name="[10a]"></a>SDMMC_SetBlockSize</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, fsl_sdmmc.o(i.SDMMC_SetBlockSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockSize
</UL>

<P><STRONG><a name="[10b]"></a>SDMMC_StopTransmission</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, fsl_sdmmc.o(i.SDMMC_StopTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
</UL>

<P><STRONG><a name="[10c]"></a>SDMMC_WaitWriteComplete</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, fsl_sdmmc.o(i.SDMMC_WaitWriteComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SDMMC_WaitWriteComplete &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>

<P><STRONG><a name="[113]"></a>SD_Deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SD_Deinit &rArr; SD_SelectCard &rArr; SDMMC_SelectCard &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[116]"></a>SD_Init</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = SD_Init &rArr; SD_SwitchHighspeed &rArr; SD_SwitchFunction &rArr; SD_SetBlockSize &rArr; SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetSdClock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetCardActive
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetCapability
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchHighspeed
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockSize
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>

<P><STRONG><a name="[121]"></a>SD_ReadBlocks</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = SD_ReadBlocks &rArr; SD_Read &rArr; SDMMC_WaitWriteComplete &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read
</UL>

<P><STRONG><a name="[125]"></a>SD_WriteBlocks</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write
</UL>

<P><STRONG><a name="[126]"></a>SWD_Disconnect</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, swd.o(i.SWD_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SWD_Disconnect &rArr; SWJ_WriteMem &rArr; swd_write_memory &rArr; SWJ_WriteMem8 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SetTargetState
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>SWD_PinDeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sdcard_fatfs.o(i.SWD_PinDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>SWD_PinInit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, sdcard_fatfs.o(i.SWD_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SWD_PinInit &rArr; SWJ_ReadAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRST
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_PinInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadDP
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadAP
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_InitDebug
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>SWD_Transfer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, swd.o(i.SWD_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadDP
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadAP
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteDP
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteBlock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadData
</UL>

<P><STRONG><a name="[132]"></a>SWD_TransferOnce</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, swd.o(i.SWD_TransferOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_WRITE_BIT
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_READ_BIT
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOUT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDIR
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>

<P><STRONG><a name="[12e]"></a>SWJ_InitDebug</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, swd.o(i.SWJ_InitDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SWJ_InitDebug &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadDP
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteDP
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_JTAG2SWD
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SetTargetState
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_PinInit
</UL>

<P><STRONG><a name="[137]"></a>SWJ_JTAG2SWD</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, swd.o(i.SWJ_JTAG2SWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SWJ_JTAG2SWD &rArr; SWJ_SendData &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SendData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SendClock
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_InitDebug
</UL>

<P><STRONG><a name="[130]"></a>SWJ_ReadAP</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, swd.o(i.SWJ_ReadAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SWJ_ReadAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteDP
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_unlock_sequence
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_PinInit
</UL>

<P><STRONG><a name="[12f]"></a>SWJ_ReadDP</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, swd.o(i.SWJ_ReadDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWJ_ReadDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_InitDebug
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_PinInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_debug_state
</UL>

<P><STRONG><a name="[129]"></a>SWJ_SetTargetState</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, swd.o(i.SWJ_SetTargetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SWJ_SetTargetState &rArr; SWJ_WriteMem32 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRST
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_InitDebug
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_US
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem32
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Disconnect
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_freq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>SWJ_WriteAP</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, swd.o(i.SWJ_WriteAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteDP
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_unlock_sequence
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Disconnect
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem32
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem8
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteBlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadMem32
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadData
</UL>

<P><STRONG><a name="[138]"></a>SWJ_WriteDP</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, swd.o(i.SWJ_WriteDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadAP
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_InitDebug
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_debug_state
</UL>

<P><STRONG><a name="[128]"></a>SWJ_WriteMem</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, swd.o(i.SWJ_WriteMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SWJ_WriteMem &rArr; swd_write_memory &rArr; SWJ_WriteMem8 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Disconnect
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_freq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>SWJ_WriteMem32</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, swd.o(i.SWJ_WriteMem32))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SWJ_WriteMem32 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SetTargetState
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_debug_state
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteCoreReg
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadCoreReg
</UL>

<P><STRONG><a name="[12c]"></a>SW_PinInit</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, swd_pin.o(i.SW_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SW_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRST
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCK
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOUT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDIR
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_PinInit
</UL>

<P><STRONG><a name="[135]"></a>SW_READ_BIT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, swd_pin.o(i.SW_READ_BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SW_READ_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCK
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_US
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferOnce
</UL>

<P><STRONG><a name="[133]"></a>SW_WRITE_BIT</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, swd_pin.o(i.SW_WRITE_BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCK
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOUT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_US
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferOnce
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SendData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SendClock
</UL>

<P><STRONG><a name="[3e]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, event.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_mk64f12.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>TCK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swd_pin.o(i.TCK))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_PinInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_WRITE_BIT
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_READ_BIT
</UL>

<P><STRONG><a name="[12d]"></a>TRST</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swd_pin.o(i.TRST))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_unlock_sequence
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_PinInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SetTargetState
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_PinInit
</UL>

<P><STRONG><a name="[147]"></a>UART0_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[1b]"></a>UART0_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_RX_TX_DriverIRQHandler &rArr; UART0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[148]"></a>UART1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[1d]"></a>UART1_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_RX_TX_DriverIRQHandler &rArr; UART1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>UART2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[1f]"></a>UART2_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_RX_TX_DriverIRQHandler &rArr; UART2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[14a]"></a>UART3_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[21]"></a>UART3_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART3_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART3_RX_TX_DriverIRQHandler &rArr; UART3_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>UART4_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[24]"></a>UART4_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART4_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_RX_TX_DriverIRQHandler &rArr; UART4_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>UART5_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART5_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[26]"></a>UART5_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART5_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_RX_TX_DriverIRQHandler &rArr; UART5_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>UART_GetDefaultConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_uart.o(i.UART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = UART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[14d]"></a>UART_GetInstance</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_uart.o(i.UART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[14e]"></a>UART_GetStatusFlags</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_uart.o(i.UART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadBlocking
</UL>

<P><STRONG><a name="[db]"></a>UART_Init</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, fsl_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = UART_Init &rArr; UART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[30]"></a>UART_ReadBlocking</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, fsl_uart.o(i.UART_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_ReadBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Init)
</UL>
<P><STRONG><a name="[2f]"></a>UART_WriteBlocking</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart.o(i.UART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_WriteBlocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Init)
</UL>
<P><STRONG><a name="[14f]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a7]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[e1]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_TRACE
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_image
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_image
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_unlock_sequence
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_freq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_PinInit
</UL>

<P><STRONG><a name="[18f]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_common.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_WriteDataPort
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleCommand
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleCardDetect
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_StartTransfer
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_ReceiveCommandResponse
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_ReadDataPort
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetInstance
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetCommandResponse
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInstance
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetDefaultConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkFreq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferNonBlocking
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferCreateHandle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetTransferConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetSdClock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetCapability
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_DriverIRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Deinit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitWriteComplete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_StopTransmission
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchHighspeed
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockSize
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeScr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCsd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCid
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[1a8]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[151]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[152]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[153]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[154]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[155]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[157]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1aa]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ab]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[18d]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[168]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[183]"></a>delay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdcard_fatfs.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>disk_initialize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = disk_initialize &rArr; sd_disk_initialize &rArr; SD_Init &rArr; SD_SwitchHighspeed &rArr; SD_SwitchFunction &rArr; SD_SetBlockSize &rArr; SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[16d]"></a>disk_ioctl</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disk_ioctl &rArr; sd_disk_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[16f]"></a>disk_read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = disk_read &rArr; sd_disk_read &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SDMMC_WaitWriteComplete &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[171]"></a>disk_status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[173]"></a>disk_write</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[175]"></a>f_chdrive</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.f_chdrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_chdrive &rArr; get_ldnumber
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = f_mount &rArr; find_volume &rArr; disk_initialize &rArr; sd_disk_initialize &rArr; SD_Init &rArr; SD_SwitchHighspeed &rArr; SD_SwitchFunction &rArr; SD_SetBlockSize &rArr; SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>f_open</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_image
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>f_read</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_image
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>f_sync</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[32]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_debug_console.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[15d]"></a>get_fat</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[0]"></a>main</STRONG> (Thumb, 618 bytes, Stack size 48 bytes, sdcard_fatfs.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = main &rArr; read_image &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_image
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_image
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePinsOutput
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_unlock_sequence
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_swd_speed
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdrive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SetTargetState
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Disconnect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_freq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_PinInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_PinDeInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[189]"></a>measure_freq</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, sdcard_fatfs.o(i.measure_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = measure_freq &rArr; CLOCK_GetBusClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetBusClkFreq
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_swd_speed
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_SetTargetState
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>modf</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, modf.o(i.modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = modf &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[d7]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[15e]"></a>put_fat</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[16c]"></a>sd_disk_initialize</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, fsl_sd_disk.o(i.sd_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = sd_disk_initialize &rArr; SD_Init &rArr; SD_SwitchHighspeed &rArr; SD_SwitchFunction &rArr; SD_SetBlockSize &rArr; SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferCreateHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Deinit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Deinit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_InitTimer
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Delete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Create
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[16e]"></a>sd_disk_ioctl</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, fsl_sd_disk.o(i.sd_disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[170]"></a>sd_disk_read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fsl_sd_disk.o(i.sd_disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = sd_disk_read &rArr; SD_ReadBlocks &rArr; SD_Read &rArr; SDMMC_WaitWriteComplete &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[172]"></a>sd_disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_sd_disk.o(i.sd_disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[174]"></a>sd_disk_write</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fsl_sd_disk.o(i.sd_disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[33]"></a>sdhc_transfer_complete_callback</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fsl_sd_disk.o(i.sdhc_transfer_complete_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdhc_transfer_complete_callback &rArr; EVENT_Notify
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_sd_disk.o(i.sd_disk_initialize)
</UL>
<P><STRONG><a name="[195]"></a>security_bits_set</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, flash_kientis.o(i.security_bits_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = security_bits_set
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
</UL>

<P><STRONG><a name="[18a]"></a>set_swd_speed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swd_pin.o(i.set_swd_speed))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_freq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[193]"></a>swd_flash_syscall_exec</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, swd.o(i.swd_flash_syscall_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; SWJ_WriteCoreReg &rArr; SWJ_WriteMem32 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_debug_state
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WaitUntilHalted
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadCoreReg
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_sector
</UL>

<P><STRONG><a name="[194]"></a>swd_write_debug_state</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, swd.o(i.swd_write_debug_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = swd_write_debug_state &rArr; SWJ_WriteCoreReg &rArr; SWJ_WriteMem32 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadDP
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem32
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteDP
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteCoreReg
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
</UL>

<P><STRONG><a name="[144]"></a>swd_write_memory</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, swd.o(i.swd_write_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = swd_write_memory &rArr; SWJ_WriteMem8 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem8
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem
</UL>

<P><STRONG><a name="[191]"></a>target_flash_erase_sector</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, flash_kientis.o(i.target_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = target_flash_erase_sector &rArr; swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; SWJ_WriteCoreReg &rArr; SWJ_WriteMem32 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_image
</UL>

<P><STRONG><a name="[190]"></a>target_flash_init</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, flash_kientis.o(i.target_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = target_flash_init &rArr; swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; SWJ_WriteCoreReg &rArr; SWJ_WriteMem32 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_image
</UL>

<P><STRONG><a name="[192]"></a>target_flash_program_page</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, flash_kientis.o(i.target_flash_program_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = target_flash_program_page &rArr; swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; SWJ_WriteCoreReg &rArr; SWJ_WriteMem32 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_bits_set
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_image
</UL>

<P><STRONG><a name="[187]"></a>target_flash_unlock_sequence</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, flash_kientis.o(i.target_flash_unlock_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = target_flash_unlock_sequence &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRST
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadAP
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[103]"></a>SDHC_ClearInterruptStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sdhc.o(i.SDHC_ClearInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[f1]"></a>SDHC_GetCommandResponse</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_GetCommandResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SDHC_GetCommandResponse &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_ReceiveCommandResponse
</UL>

<P><STRONG><a name="[ee]"></a>SDHC_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetTransferInterrupt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferCreateHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Deinit
</UL>

<P><STRONG><a name="[100]"></a>SDHC_GetInterruptStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_sdhc.o(i.SDHC_GetInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[105]"></a>SDHC_GetPresentStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_sdhc.o(i.SDHC_GetPresentStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferNonBlocking
</UL>

<P><STRONG><a name="[f5]"></a>SDHC_ReadDataPort</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, fsl_sdhc.o(i.SDHC_ReadDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SDHC_ReadDataPort &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleData
</UL>

<P><STRONG><a name="[f6]"></a>SDHC_ReceiveCommandResponse</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_ReceiveCommandResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SDHC_ReceiveCommandResponse &rArr; SDHC_GetCommandResponse &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetCommandResponse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleCommand
</UL>

<P><STRONG><a name="[f4]"></a>SDHC_SetTransferInterrupt</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, fsl_sdhc.o(i.SDHC_SetTransferInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SDHC_SetTransferInterrupt &rArr; SDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferCreateHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_Init
</UL>

<P><STRONG><a name="[f9]"></a>SDHC_StartTransfer</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, fsl_sdhc.o(i.SDHC_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SDHC_StartTransfer &rArr; SDHC_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_SetTransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferNonBlocking
</UL>

<P><STRONG><a name="[fc]"></a>SDHC_TransferHandleCardDetect</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_sdhc.o(i.SDHC_TransferHandleCardDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SDHC_TransferHandleCardDetect &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[fd]"></a>SDHC_TransferHandleCommand</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_TransferHandleCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SDHC_TransferHandleCommand &rArr; SDHC_ReceiveCommandResponse &rArr; SDHC_GetCommandResponse &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_ReceiveCommandResponse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[fe]"></a>SDHC_TransferHandleData</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, fsl_sdhc.o(i.SDHC_TransferHandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SDHC_TransferHandleData &rArr; SDHC_WriteDataPort &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_WriteDataPort
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_ReadDataPort
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[102]"></a>SDHC_TransferHandleSdioBlockGap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_sdhc.o(i.SDHC_TransferHandleSdioBlockGap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDHC_TransferHandleSdioBlockGap
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[101]"></a>SDHC_TransferHandleSdioInterrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_sdhc.o(i.SDHC_TransferHandleSdioInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDHC_TransferHandleSdioInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
</UL>

<P><STRONG><a name="[ff]"></a>SDHC_WriteDataPort</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, fsl_sdhc.o(i.SDHC_WriteDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SDHC_WriteDataPort &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleData
</UL>

<P><STRONG><a name="[c9]"></a>CLOCK_GetFllExtRefClkFreq</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_GetFllExtRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>

<P><STRONG><a name="[c8]"></a>CLOCK_GetFllRefClkFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFllRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[d0]"></a>CLOCK_GetInternalRefClkSelectFreq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkSelectFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
</UL>

<P><STRONG><a name="[ca]"></a>CLOCK_GetMcgExtClkFreq</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetMcgExtClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0RefFreq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
</UL>

<P><STRONG><a name="[d2]"></a>CLOCK_GetOscRangeFromFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscRangeFromFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
</UL>

<P><STRONG><a name="[d1]"></a>CLOCK_GetPll0RefFreq</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPll0RefFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = CLOCK_GetPll0RefFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
</UL>

<P><STRONG><a name="[eb]"></a>PIT_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_pit.o(i.PIT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = PIT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[12b]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdcard_fatfs.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_PinInit
</UL>

<P><STRONG><a name="[e3]"></a>GPIO_ClearPinsOutput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdcard_fatfs.o(i.GPIO_ClearPinsOutput))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_TRACE
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_image
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>GPIO_SetPinsOutput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdcard_fatfs.o(i.GPIO_SetPinsOutput))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_TRACE
</UL>

<P><STRONG><a name="[18c]"></a>GPIO_TogglePinsOutput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdcard_fatfs.o(i.GPIO_TogglePinsOutput))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_image
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>program_image</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, sdcard_fatfs.o(i.program_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = program_image &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_TRACE
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePinsOutput
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_sector
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>read_image</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sdcard_fatfs.o(i.read_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = read_image &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>EVENT_GetInstance</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, event.o(i.EVENT_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Wait
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Notify
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Delete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Create
</UL>

<P><STRONG><a name="[34]"></a>sdhc_transfer_function</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_sd_disk.o(i.sdhc_transfer_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = sdhc_transfer_function &rArr; SDHC_TransferNonBlocking &rArr; SDHC_StartTransfer &rArr; SDHC_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferNonBlocking
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_sd_disk.o(i.sd_disk_initialize)
</UL>
<P><STRONG><a name="[15a]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[161]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[15c]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[15f]"></a>create_name</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[162]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[165]"></a>dir_find</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[164]"></a>dir_next</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[169]"></a>dir_register</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[163]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[17b]"></a>find_volume</STRONG> (Thumb, 904 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = find_volume &rArr; disk_initialize &rArr; sd_disk_initialize &rArr; SD_Init &rArr; SD_SwitchHighspeed &rArr; SD_SwitchFunction &rArr; SD_SetBlockSize &rArr; SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[17d]"></a>follow_path</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[176]"></a>get_ldnumber</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdrive
</UL>

<P><STRONG><a name="[17e]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[166]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[16a]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[160]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[15b]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[180]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[17f]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[182]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[167]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = sync_window &rArr; disk_write &rArr; sd_disk_write &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[179]"></a>validate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[bc]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pin_mux.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[be]"></a>PORT_SetPinConfig</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pin_mux.o(i.PORT_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = PORT_SetPinConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[bd]"></a>PORT_SetPinMux</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pin_mux.o(i.PORT_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[d3]"></a>DbgConsole_ConvertFloatRadixNumToString</STRONG> (Thumb, 488 bytes, Stack size 120 bytes, fsl_debug_console.o(i.DbgConsole_ConvertFloatRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[d9]"></a>DbgConsole_ConvertRadixNumToString</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, fsl_debug_console.o(i.DbgConsole_ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DbgConsole_ConvertRadixNumToString &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[dd]"></a>DbgConsole_PrintfFormattedData</STRONG> (Thumb, 1512 bytes, Stack size 152 bytes, fsl_debug_console.o(i.DbgConsole_PrintfFormattedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfPaddingCharacter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[de]"></a>DbgConsole_PrintfPaddingCharacter</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_PrintfPaddingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DbgConsole_PrintfPaddingCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[10d]"></a>SD_AllSendCid</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_AllSendCid))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SD_AllSendCid &rArr; SD_DecodeCid &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCid
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[10f]"></a>SD_ApplicationSendOperationCondition</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_ApplicationSendOperationCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = SD_ApplicationSendOperationCondition &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[10e]"></a>SD_DecodeCid</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_DecodeCid))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SD_DecodeCid &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[111]"></a>SD_DecodeCsd</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_DecodeCsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SD_DecodeCsd &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
</UL>

<P><STRONG><a name="[112]"></a>SD_DecodeScr</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_DecodeScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SD_DecodeScr &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
</UL>

<P><STRONG><a name="[115]"></a>SD_GoIdle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_GoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SD_GoIdle &rArr; SDMMC_GoIdle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[11f]"></a>SD_Read</STRONG> (Thumb, 322 bytes, Stack size 88 bytes, fsl_sd.o(i.SD_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SD_Read &rArr; SDMMC_WaitWriteComplete &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitWriteComplete
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>

<P><STRONG><a name="[114]"></a>SD_SelectCard</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SD_SelectCard &rArr; SDMMC_SelectCard &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Deinit
</UL>

<P><STRONG><a name="[110]"></a>SD_SendApplicationCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_SendApplicationCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
</UL>

<P><STRONG><a name="[11a]"></a>SD_SendCsd</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_SendCsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SD_SendCsd &rArr; SD_DecodeCsd &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCsd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[118]"></a>SD_SendInterfaceCondition</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_SendInterfaceCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SD_SendInterfaceCondition &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[119]"></a>SD_SendRca</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_SendRca))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SD_SendRca &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[11b]"></a>SD_SendScr</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, fsl_sd.o(i.SD_SendScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = SD_SendScr &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_fsl_sd_c_SD_Init____REV16
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeScr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[11e]"></a>SD_SetBlockSize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_SetBlockSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SD_SetBlockSize &rArr; SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
</UL>

<P><STRONG><a name="[11c]"></a>SD_SetDataBusWidth</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_SetDataBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = SD_SetDataBusWidth &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[120]"></a>SD_StopTransmission</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_StopTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>

<P><STRONG><a name="[123]"></a>SD_SwitchFunction</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, fsl_sd.o(i.SD_SwitchFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = SD_SwitchFunction &rArr; SD_SetBlockSize &rArr; SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockSize
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchHighspeed
</UL>

<P><STRONG><a name="[11d]"></a>SD_SwitchHighspeed</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, fsl_sd.o(i.SD_SwitchHighspeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = SD_SwitchHighspeed &rArr; SD_SwitchFunction &rArr; SD_SetBlockSize &rArr; SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_fsl_sd_c_SD_Init____REV16
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[124]"></a>SD_Write</STRONG> (Thumb, 298 bytes, Stack size 80 bytes, fsl_sd.o(i.SD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = SD_Write &rArr; SD_StopTransmission &rArr; SDMMC_StopTransmission &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
</UL>

<P><STRONG><a name="[13b]"></a>SWJ_ReadCoreReg</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, swd.o(i.SWJ_ReadCoreReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SWJ_ReadCoreReg &rArr; SWJ_WriteMem32 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem32
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadMem32
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
</UL>

<P><STRONG><a name="[13e]"></a>SWJ_ReadData</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, swd.o(i.SWJ_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SWJ_ReadData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadMem32
</UL>

<P><STRONG><a name="[13d]"></a>SWJ_ReadMem32</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, swd.o(i.SWJ_ReadMem32))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SWJ_ReadMem32 &rArr; SWJ_ReadData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteCoreReg
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WaitUntilHalted
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadCoreReg
</UL>

<P><STRONG><a name="[139]"></a>SWJ_SendClock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, swd.o(i.SWJ_SendClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SWJ_SendClock &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_WRITE_BIT
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_JTAG2SWD
</UL>

<P><STRONG><a name="[13a]"></a>SWJ_SendData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, swd.o(i.SWJ_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SWJ_SendData &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_WRITE_BIT
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_JTAG2SWD
</UL>

<P><STRONG><a name="[140]"></a>SWJ_WaitUntilHalted</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd.o(i.SWJ_WaitUntilHalted))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SWJ_WaitUntilHalted &rArr; SWJ_ReadMem32 &rArr; SWJ_ReadData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadMem32
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
</UL>

<P><STRONG><a name="[141]"></a>SWJ_WriteBlock</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, swd.o(i.SWJ_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SWJ_WriteBlock &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
</UL>

<P><STRONG><a name="[142]"></a>SWJ_WriteCoreReg</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, swd.o(i.SWJ_WriteCoreReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SWJ_WriteCoreReg &rArr; SWJ_WriteMem32 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem32
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_ReadMem32
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_debug_state
</UL>

<P><STRONG><a name="[143]"></a>SWJ_WriteData</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, swd.o(i.SWJ_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem32
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteMem8
</UL>

<P><STRONG><a name="[145]"></a>SWJ_WriteMem8</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, swd.o(i.SWJ_WriteMem8))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SWJ_WriteMem8 &rArr; SWJ_WriteData &rArr; SWJ_WriteAP &rArr; SWJ_WriteDP &rArr; SWD_Transfer &rArr; SWD_TransferOnce &rArr; SW_WRITE_BIT &rArr; DELAY_US
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteAP
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
</UL>

<P><STRONG><a name="[150]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[159]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[158]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
